{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell XPS\\\\Desktop\\\\complete chinese shopping app\\\\complete-shopping\\\\src\\\\pages\\\\ShopPage.js\";\nimport React, { Component } from 'react'; //import SHOP_DATA from '../Shopdata'\n//import PreviewCollection from '../components/PreviewCollection'\n\nimport CollectionOverview from '../components/CollectionOverview'; // import { connect } from 'react-redux'\n// import { selectCollection } from '../redux/shop/shop-selector'\n// import { createStructuredSelector } from 'reselect'\n\nimport { Route } from 'react-router-dom';\nimport CollectionsPage from './Collections';\nimport { firestore, convertCollectionSnapshotToMap } from '../firebase/firebase.utils';\nimport { connect } from 'react-redux'; //import { updateCollections } from '../redux/shop/shop-actions'\n\nimport WithSpinner from '../components/Spinner';\nimport { createStructuredSelector } from 'reselect';\nimport { fetchcollectionstartasync } from '../redux/shop/shop-actions';\nimport { selectIsCollectionFetching } from '../redux/shop/shop-selector'; // class ShopPage extends Component{\n//     constructor(){\n//         super()\n//         this.state={\n//             collections:SHOP_DATA\n//         }\n//     }\n// render(){\n//     const {collections} = this.state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionOverview);\n_c = CollectionsOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionsPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends Component {\n  //    state={\n  //        loading:true\n  //    }\n  //     unsubscribeFromSnapshot = null;\n  componentDidMount() {// const {updateCollections} = this.props\n    // const collectionRef = firestore.collection('collections')\n    // //to get the data is use\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{\n    //     //console.log(snapshot);\n    //    const collectionsMap =  convertCollectionSnapshotToMap(snapshot)\n    //    //console.log(collectionsMap);\n    //    updateCollections(collectionsMap)\n    //    this.setState({\n    //        loading:false\n    //    })\n    // })\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}` //component={CollectionOverview}\n        ,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId` //component={CollectionsPage} \n        ,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n          isLoading: loading,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this);\n  }\n\n} // const mapStateToProps = createStructuredSelector({\n//     collections:selectCollection\n// })\n// export default connect(mapStateToProps)(ShopPage)\n\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n}); // export default connect(mapStateToProps)(ShopPage)\n\nconst mapDispatchToProps = dispatch => ({// updateCollections : collectionsMap=>dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["C:/Users/Dell XPS/Desktop/complete chinese shopping app/complete-shopping/src/pages/ShopPage.js"],"names":["React","Component","CollectionOverview","Route","CollectionsPage","firestore","convertCollectionSnapshotToMap","connect","WithSpinner","createStructuredSelector","fetchcollectionstartasync","selectIsCollectionFetching","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","componentDidMount","render","match","props","loading","state","path","mapStateToProps","isCollectionFetching","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B,C,CACA;AACA;;AACA,OAAOC,kBAAP,MAA+B,kCAA/B,C,CACA;AACA;AACA;;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,eAAP,MAA4B,eAA5B;AACA,SAAQC,SAAR,EAAoBC,8BAApB,QAAyD,4BAAzD;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,yBAAT,QAA0C,4BAA1C;AACA,SAASC,0BAAT,QAA2C,6BAA3C,C,CACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,MAAMC,8BAA8B,GAAGJ,WAAW,CAACN,kBAAD,CAAlD;KAAMU,8B;AACN,MAAMC,yBAAyB,GAAGL,WAAW,CAACJ,eAAD,CAA7C;MAAMS,yB;;AAEN,MAAMC,QAAN,SAAuBb,SAAvB,CAAiC;AACjC;AACA;AACA;AACA;AAEIc,EAAAA,iBAAiB,GAAE,CACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEFC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKC,KAArB;AACA,UAAM;AAACC,MAAAA;AAAD,QAAY,KAAKC,KAAvB;AAEH,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACA,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAEH,KAAK,CAACI,IAAK,EAAjC,CACA;AADA;AAEA,QAAA,MAAM,EAAGH,KAAD,iBAAS,QAAC,8BAAD;AAAgC,UAAA,SAAS,EAAEC,OAA3C;AAAA,aAAwDD;AAAxD;AAAA;AAAA;AAAA;AAAA;AAFjB;AAAA;AAAA;AAAA;AAAA,cADA,eAKA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAED,KAAK,CAACI,IAAK,gBAA3B,CACA;AADA;AAEA,QAAA,MAAM,EAAIH,KAAD,iBAAS,QAAC,yBAAD;AAA2B,UAAA,SAAS,EAAEC,OAAtC;AAAA,aAAmDD;AAAnD;AAAA;AAAA;AAAA;AAAA;AAFlB;AAAA;AAAA;AAAA;AAAA,cALA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaA;;AAtC6B,C,CA2CjC;AACA;AACA;AAEA;;;AAEA,MAAMI,eAAe,GAAGb,wBAAwB,CAAC;AAC5Cc,EAAAA,oBAAoB,EAACZ;AADuB,CAAD,CAAhD,C,CAII;;AAEJ,MAAMa,kBAAkB,GAAGC,QAAQ,KAAI,CACnC;AADmC,CAAJ,CAAnC;;AAKA,eAAelB,OAAO,CAAC,IAAD,EAAMiB,kBAAN,CAAP,CAAiCV,QAAjC,CAAf","sourcesContent":["import React,{Component} from 'react'\r\n//import SHOP_DATA from '../Shopdata'\r\n//import PreviewCollection from '../components/PreviewCollection'\r\nimport CollectionOverview from '../components/CollectionOverview'\r\n// import { connect } from 'react-redux'\r\n// import { selectCollection } from '../redux/shop/shop-selector'\r\n// import { createStructuredSelector } from 'reselect'\r\nimport { Route } from 'react-router-dom'\r\nimport CollectionsPage from './Collections'\r\nimport {firestore , convertCollectionSnapshotToMap} from '../firebase/firebase.utils'\r\nimport {connect} from 'react-redux'\r\n//import { updateCollections } from '../redux/shop/shop-actions'\r\nimport WithSpinner from '../components/Spinner'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { fetchcollectionstartasync } from '../redux/shop/shop-actions'\r\nimport { selectIsCollectionFetching } from '../redux/shop/shop-selector'\r\n// class ShopPage extends Component{\r\n//     constructor(){\r\n//         super()\r\n\r\n//         this.state={\r\n//             collections:SHOP_DATA\r\n//         }\r\n//     }\r\n\r\n// render(){\r\n//     const {collections} = this.state\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionOverview)\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionsPage)\r\n\r\nclass ShopPage extends Component {\r\n//    state={\r\n//        loading:true\r\n//    }\r\n//     unsubscribeFromSnapshot = null;\r\n\r\n    componentDidMount(){\r\n        // const {updateCollections} = this.props\r\n        // const collectionRef = firestore.collection('collections')\r\n        // //to get the data is use\r\n        // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot =>{\r\n        //     //console.log(snapshot);\r\n        //    const collectionsMap =  convertCollectionSnapshotToMap(snapshot)\r\n        //    //console.log(collectionsMap);\r\n        //    updateCollections(collectionsMap)\r\n        //    this.setState({\r\n        //        loading:false\r\n        //    })\r\n        // })\r\n    }\r\n\r\n   render(){\r\n       const {match} = this.props\r\n       const {loading} = this.state\r\n\r\n    return(\r\n        <div className=\"shop-page\">\r\n        <Route exact path={`${match.path}`}\r\n        //component={CollectionOverview}\r\n        render={(props)=><CollectionsOverviewWithSpinner isLoading={loading} {...props}/>}/>\r\n\r\n        <Route path={`${match.path}/:collectionId`}\r\n        //component={CollectionsPage} \r\n        render ={(props)=><CollectionPageWithSpinner isLoading={loading} {...props}/>}/>\r\n        </div>\r\n    ) \r\n\r\n\r\n   }\r\n    \r\n}\r\n\r\n\r\n// const mapStateToProps = createStructuredSelector({\r\n//     collections:selectCollection\r\n// })\r\n\r\n// export default connect(mapStateToProps)(ShopPage)\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n     isCollectionFetching:selectIsCollectionFetching\r\n })\r\n    \r\n    // export default connect(mapStateToProps)(ShopPage)\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    // updateCollections : collectionsMap=>dispatch(updateCollections(collectionsMap))\r\n    \r\n})\r\n\r\nexport default connect(null,mapDispatchToProps)(ShopPage)"]},"metadata":{},"sourceType":"module"}