{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nconst config = {\n  apiKey: \"AIzaSyA9Hdl2znYilJO7mk9yJO7ig5h3mWTO0fg\",\n  authDomain: \"crown-cloth-final-database.firebaseapp.com\",\n  projectId: \"crown-cloth-final-database\",\n  storageBucket: \"crown-cloth-final-database.appspot.com\",\n  messagingSenderId: \"310294854701\",\n  appId: \"1:310294854701:web:4dfd03a667161cbdf58ca4\",\n  measurementId: \"G-BHBX9RS604\"\n};\nfirebase.initializeApp(config); //for database storing\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //console.log(userAuth);\n  //async bcz api is gonna be passes\n  if (!userAuth) //if no user auth\n    return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); //console.log(snapShot.data());\n\n  if (!snapShot.exists) {\n    //if no snapshot exists\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndItem = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); //console.log(collectionRef);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Dell XPS/Desktop/complete chinese shopping app/complete-shopping/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndItem","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,sBAAP;AACA,OAAO,2BAAP;AAGA,MAAMC,MAAM,GAAC;AACLC,EAAAA,MAAM,EAAE,yCADH;AAELC,EAAAA,UAAU,EAAE,4CAFP;AAGLC,EAAAA,SAAS,EAAE,4BAHN;AAILC,EAAAA,aAAa,EAAE,wCAJV;AAKLC,EAAAA,iBAAiB,EAAE,cALd;AAMLC,EAAAA,KAAK,EAAE,2CANF;AAOLC,EAAAA,aAAa,EAAE;AAPV,CAAb;AAUAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB,E,CAGA;;AACA,OAAO,MAAMS,yBAAyB,GAAG,OAAMC,QAAN,EAAeC,cAAf,KAAgC;AACrE;AACA;AACA,MAAG,CAACD,QAAJ,EAAc;AACV;AAEH,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAPoE,CAQrE;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAAE;AAClB,UAAM;AAACC,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAAsBV,QAA5B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACC,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOC,OAAMa,KAAN,EAAY;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCF,KAAK,CAACG,OAAxC;AACH;AACJ;;AACD,SAAOf,OAAP;AACH,CAzBM;AA2BP,OAAO,MAAMgB,oBAAoB,GAAG,CAACC,aAAD,EAAeC,YAAf,KAA+B;AAC/D,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB,CAD+D,CAE/D;;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYU,SAAZ;AACH,GAHD;AAIH,CATM;AAWP,OAAO,MAAMC,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAMxB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMyB,QAAQ,GAAE,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAhB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AACzBC,EAAAA,MAAM,EAAC;AADkB,CAA7B;AAIA,OAAO,MAAMC,gBAAgB,GAAG,MAChCL,IAAI,CAACM,eAAL,CAAqBL,QAArB,CADO;AAGP,eAAevC,QAAf","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\n\r\n\r\nconst config={\r\n        apiKey: \"AIzaSyA9Hdl2znYilJO7mk9yJO7ig5h3mWTO0fg\",\r\n        authDomain: \"crown-cloth-final-database.firebaseapp.com\",\r\n        projectId: \"crown-cloth-final-database\",\r\n        storageBucket: \"crown-cloth-final-database.appspot.com\",\r\n        messagingSenderId: \"310294854701\",\r\n        appId: \"1:310294854701:web:4dfd03a667161cbdf58ca4\",\r\n        measurementId: \"G-BHBX9RS604\"\r\n}\r\n\r\nfirebase.initializeApp(config)\r\n\r\n\r\n//for database storing\r\nexport const createUserProfileDocument = async(userAuth,additionalData)=>{\r\n    //console.log(userAuth);\r\n    //async bcz api is gonna be passes\r\n    if(!userAuth) //if no user auth\r\n        return\r\n\r\n     const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n     const snapShot = await userRef.get()\r\n    //console.log(snapShot.data());\r\n    if(!snapShot.exists){ //if no snapshot exists\r\n        const {displayName,email} = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try{\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        }catch(error){\r\n            console.log('error creating user',error.message);\r\n        }\r\n    }\r\n    return userRef\r\n}\r\n\r\nexport const addCollectionAndItem = (collectionKey,objectsToAdd) =>{\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    //console.log(collectionRef);\r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = collectionRef.doc()\r\n        console.log(newDocRef);\r\n    })\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider= new firebase.auth.GoogleAuthProvider()\r\nprovider.setCustomParameters({\r\n    prompt:'select_account'\r\n})\r\n\r\nexport const signInWithGoogle = () => \r\nauth.signInWithPopup(provider);\r\n\r\nexport default firebase"]},"metadata":{},"sourceType":"module"}